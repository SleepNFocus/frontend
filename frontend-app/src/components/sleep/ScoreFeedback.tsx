import React from 'react';
import { View, StyleSheet } from 'react-native';
import { Text, Card } from 'react-native-paper';
import { ScoreBreakdown } from '@/app/types/sleep';
import { colors } from '@/constants/colors';
import { Button } from '@/components/common/Button';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';

type RootStackParamList = {
  SleepRecord: undefined;
  SleepTest: undefined;
};

type NavigationProp = NativeStackNavigationProp<RootStackParamList>;

interface ScoreFeedbackProps {
  score: number;
  scoreBreakdown: ScoreBreakdown;
}

export const ScoreFeedback: React.FC<ScoreFeedbackProps> = ({
  score,
  scoreBreakdown,
}) => {
  const navigation = useNavigation<NavigationProp>();

  const getFeedback = (score: number) => {
    if (score >= 90) {
      return {
        emoji: 'üåü',
        title: 'ÏµúÍ≥†Ïùò ÏàòÎ©¥!',
        message:
          'ÏôÑÎ≤ΩÌïú ÏàòÎ©¥ ÏäµÍ¥ÄÏùÑ Í∞ÄÏßÄÍ≥† Í≥ÑÏãúÎäîÍµ∞Ïöî! Ïò§Îäò ÌïòÎ£®ÎèÑ ÌôúÍ∏∞Ï∞®Í≤å ÏãúÏûëÌïòÏÑ∏Ïöî!',
        color: colors.scoreExcellent,
      };
    }
    if (score >= 70) {
      return {
        emoji: 'üòä',
        title: 'Ï¢ãÏùÄ ÏàòÎ©¥!',
        message:
          'Í±¥Í∞ïÌïú ÏàòÎ©¥ Ìå®ÌÑ¥ÏùÑ Ïûò Ïú†ÏßÄÌïòÍ≥† Í≥ÑÏÑ∏Ïöî. ÏûëÏùÄ Í∞úÏÑ†ÏúºÎ°ú Îçî ÏôÑÎ≤ΩÌï¥Ïßà Ïàò ÏûàÏñ¥Ïöî.',
        color: colors.scoreGood,
      };
    }
    if (score >= 50) {
      return {
        emoji: 'ü§î',
        title: 'Î≥¥ÌÜµ ÏàòÎ©¥.',
        message: 'Í¥úÏ∞ÆÏßÄÎßå, Ï°∞Í∏à Îçî Ïã†Í≤Ω Ïì∞Î©¥ ÏàòÎ©¥Ïùò ÏßàÏùÑ ÎÜíÏùº Ïàò ÏûàÏñ¥Ïöî.',
        color: colors.scoreNormal,
      };
    }
    return {
      emoji: 'üõå',
      title: 'Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌïú ÏàòÎ©¥.',
      message:
        'ÏàòÎ©¥ ÏäµÍ¥ÄÏùÑ Ï†êÍ≤ÄÌïòÍ≥† Í∞úÏÑ†Ìï¥ Î≥¥ÏÑ∏Ïöî. Í∞ÄÏû• Ï†êÏàòÍ∞Ä ÎÇÆÏùÄ Î∂ÄÎ∂ÑÎ∂ÄÌÑ∞ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî.',
      color: colors.scorePoor,
    };
  };

  const getImprovementSuggestions = (scoreBreakdown: ScoreBreakdown) => {
    const suggestions = [];

    if (scoreBreakdown.durationScore < 20) {
      suggestions.push('üïê ÏàòÎ©¥ ÏãúÍ∞ÑÏùÑ 7-9ÏãúÍ∞Ñ ÏÇ¨Ïù¥Î°ú Ï°∞Ï†àÌï¥Î≥¥ÏÑ∏Ïöî');
    }
    if (scoreBreakdown.qualityScore < 20) {
      suggestions.push('üò¥ ÏàòÎ©¥ ÌôòÍ≤ΩÏùÑ Îçî Ìé∏ÏïàÌïòÍ≤å ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî');
    }
    if (scoreBreakdown.sleepEfficiencyScore < 15) {
      suggestions.push('‚è∞ Í∑úÏπôÏ†ÅÏù∏ ÏàòÎ©¥ Î£®Ìã¥ÏùÑ ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî');
    }
    if (scoreBreakdown.environmentScore < 15) {
      suggestions.push('üì± Ïû†Îì§Í∏∞ Ï†Ñ Ï†ÑÏûêÍ∏∞Í∏∞ ÏÇ¨Ïö©ÏùÑ Ï§ÑÏó¨Î≥¥ÏÑ∏Ïöî');
    }

    return suggestions;
  };

  const feedback = getFeedback(score);
  const suggestions = getImprovementSuggestions(scoreBreakdown);

  return (
    <Card style={[styles.card, { borderLeftColor: feedback.color }]}>
      <Card.Content>
        <View style={styles.header}>
          <Text style={styles.emoji}>{feedback.emoji}</Text>
          <View style={styles.headerText}>
            <Text
              variant="titleLarge"
              style={[styles.title, { color: feedback.color }]}
            >
              {feedback.title}
            </Text>
            <Text variant="headlineSmall" style={styles.score}>
              {score}Ï†ê
            </Text>
          </View>
        </View>

        <Text variant="bodyLarge" style={styles.message}>
          {feedback.message}
        </Text>

        {suggestions.length > 0 && (
          <View style={styles.suggestionsSection}>
            <Text variant="titleMedium" style={styles.suggestionsTitle}>
              Í∞úÏÑ† Ï†úÏïà:
            </Text>
            {suggestions.map((suggestion, index) => (
              <Text key={index} variant="bodyMedium" style={styles.suggestion}>
                ‚Ä¢ {suggestion}
              </Text>
            ))}
          </View>
        )}

        <View style={styles.scoreDetails}>
          <Text variant="titleSmall" style={styles.detailsTitle}>
            ÏÑ∏Î∂Ä Ï†êÏàò:
          </Text>
          <View style={styles.scoreGrid}>
            <View style={styles.scoreItem}>
              <Text variant="bodySmall">ÏàòÎ©¥ÏãúÍ∞Ñ</Text>
              <Text variant="bodyMedium" style={styles.scoreValue}>
                {scoreBreakdown.durationScore}/25
              </Text>
            </View>
            <View style={styles.scoreItem}>
              <Text variant="bodySmall">ÏàòÎ©¥Ïßà</Text>
              <Text variant="bodyMedium" style={styles.scoreValue}>
                {scoreBreakdown.qualityScore}/30
              </Text>
            </View>
            <View style={styles.scoreItem}>
              <Text variant="bodySmall">ÏàòÎ©¥Ìö®Ïú®</Text>
              <Text variant="bodyMedium" style={styles.scoreValue}>
                {scoreBreakdown.sleepEfficiencyScore}/25
              </Text>
            </View>
            <View style={styles.scoreItem}>
              <Text variant="bodySmall">ÏàòÎ©¥ÌôòÍ≤Ω</Text>
              <Text variant="bodyMedium" style={styles.scoreValue}>
                {scoreBreakdown.environmentScore}/20
              </Text>
            </View>
          </View>
        </View>
      </Card.Content>
    </Card>
  );
};

const styles = StyleSheet.create({
  card: {
    marginVertical: 16,
    borderLeftWidth: 4,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  emoji: {
    fontSize: 32,
    marginRight: 12,
  },
  headerText: {
    flex: 1,
  },
  title: {
    fontWeight: 'bold',
  },
  score: {
    fontWeight: 'bold',
    color: colors.softBlue,
  },
  message: {
    marginBottom: 16,
    lineHeight: 22,
  },
  suggestionsSection: {
    marginBottom: 16,
    padding: 12,
    backgroundColor: colors.lightGray,
    borderRadius: 8,
  },
  suggestionsTitle: {
    marginBottom: 8,
    fontWeight: 'bold',
    color: colors.softBlue,
  },
  suggestion: {
    marginBottom: 4,
    lineHeight: 20,
  },
  scoreDetails: {
    marginTop: 8,
  },
  detailsTitle: {
    marginBottom: 8,
    fontWeight: 'bold',
  },
  scoreGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
  },
  scoreItem: {
    flex: 1,
    minWidth: 80,
    alignItems: 'center',
    padding: 8,
    backgroundColor: colors.lightGray,
    borderRadius: 6,
  },
  scoreValue: {
    fontWeight: 'bold',
    color: colors.softBlue,
  },
  button: {
    marginTop: 24,
  },
});
